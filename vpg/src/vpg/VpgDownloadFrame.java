/*
 * This file is part of the Visualization of Protein Ligand Graphs (VPLG) software package.
 *
 * Copyright Tim Sch√§fer 2012. VPLG is free software, see the LICENSE and README files for details.
 *
 * @author ts
 */

package vpg;

import java.awt.Color;
import java.awt.event.ItemListener;
import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author ts
 */
public class VpgDownloadFrame extends javax.swing.JFrame implements DocumentListener {

    /**
     * Creates new form VpgDownloadFrame
     */
    public VpgDownloadFrame() {
        initComponents();
        this.jRadioButtonPDB.setSelected(true);
        this.jTextFieldLocalPath.setText(Settings.get("vpg_S_input_dir"));
        this.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        this.jTextFieldLocalPath.getDocument().addDocumentListener(this);
        this.jTextFieldPdbId.getDocument().addDocumentListener(this);
        this.checkInput();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupDownloadWhat = new javax.swing.ButtonGroup();
        jPanelStatusBar = new javax.swing.JPanel();
        jLabelStatusBar = new javax.swing.JLabel();
        jPanelMainContent = new javax.swing.JPanel();
        jLabelLocalPath = new javax.swing.JLabel();
        jTextFieldLocalPath = new javax.swing.JTextField();
        jLabelFileType = new javax.swing.JLabel();
        jRadioButtonPDB = new javax.swing.JRadioButton();
        jRadioButtonDSSP = new javax.swing.JRadioButton();
        jRadioButtonBoth = new javax.swing.JRadioButton();
        jButtonSelectOutputPath = new javax.swing.JButton();
        jLabelPdbId = new javax.swing.JLabel();
        jTextFieldPdbId = new javax.swing.JTextField();
        jButtonDownload = new javax.swing.JButton();
        jLabelStatus = new javax.swing.JLabel();
        jScrollPaneStatus = new javax.swing.JScrollPane();
        jTextAreaStatus = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("VPG Input file downloader");

        jLabelStatusBar.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabelStatusBar.setText("Download manager ready.");

        javax.swing.GroupLayout jPanelStatusBarLayout = new javax.swing.GroupLayout(jPanelStatusBar);
        jPanelStatusBar.setLayout(jPanelStatusBarLayout);
        jPanelStatusBarLayout.setHorizontalGroup(
            jPanelStatusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelStatusBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanelStatusBarLayout.setVerticalGroup(
            jPanelStatusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelStatusBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
        );

        jLabelLocalPath.setText("Local output path:");
        jLabelLocalPath.setToolTipText("The local path where the downloaded files are stored.");

        jTextFieldLocalPath.setText("/home/ts/data/");

        jLabelFileType.setText("File type to download:");
        jLabelFileType.setToolTipText("Which file types to download.");

        buttonGroupDownloadWhat.add(jRadioButtonPDB);
        jRadioButtonPDB.setText("PDB");
        jRadioButtonPDB.setToolTipText("The PDB file contains atom coordinates, it is downloaded from the RCSB Protein Data Bank website.");

        buttonGroupDownloadWhat.add(jRadioButtonDSSP);
        jRadioButtonDSSP.setText("DSSP");
        jRadioButtonDSSP.setToolTipText("The DSSP file contains secondary structure assignments computed by DSSP, a program by Kabsch and Sander.");

        buttonGroupDownloadWhat.add(jRadioButtonBoth);
        jRadioButtonBoth.setText("Both");
        jRadioButtonBoth.setToolTipText("Will download both the PDB and DSSP files.");

        jButtonSelectOutputPath.setText("Choose...");
        jButtonSelectOutputPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectOutputPathActionPerformed(evt);
            }
        });

        jLabelPdbId.setText("PDB ID:");
        jLabelPdbId.setToolTipText("The RCSB Protein Data Bank identifier for a protein. You can get it at the PDB website.");

        jTextFieldPdbId.setText("8icd");

        jButtonDownload.setText("Download");
        jButtonDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDownloadActionPerformed(evt);
            }
        });

        jLabelStatus.setText("Status:");

        jTextAreaStatus.setBackground(new java.awt.Color(200, 200, 200));
        jTextAreaStatus.setColumns(20);
        jTextAreaStatus.setEditable(false);
        jTextAreaStatus.setRows(5);
        jTextAreaStatus.setText("(not run yet)");
        jScrollPaneStatus.setViewportView(jTextAreaStatus);

        javax.swing.GroupLayout jPanelMainContentLayout = new javax.swing.GroupLayout(jPanelMainContent);
        jPanelMainContent.setLayout(jPanelMainContentLayout);
        jPanelMainContentLayout.setHorizontalGroup(
            jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMainContentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneStatus)
                    .addGroup(jPanelMainContentLayout.createSequentialGroup()
                        .addComponent(jTextFieldLocalPath, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                        .addComponent(jButtonSelectOutputPath))
                    .addGroup(jPanelMainContentLayout.createSequentialGroup()
                        .addComponent(jTextFieldPdbId, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonDownload))
                    .addGroup(jPanelMainContentLayout.createSequentialGroup()
                        .addGroup(jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelLocalPath)
                            .addComponent(jLabelFileType)
                            .addGroup(jPanelMainContentLayout.createSequentialGroup()
                                .addComponent(jRadioButtonPDB)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButtonDSSP)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioButtonBoth))
                            .addComponent(jLabelPdbId)
                            .addComponent(jLabelStatus))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelMainContentLayout.setVerticalGroup(
            jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMainContentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelLocalPath)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldLocalPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSelectOutputPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelFileType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonPDB)
                    .addComponent(jRadioButtonDSSP)
                    .addComponent(jRadioButtonBoth))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelPdbId)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPdbId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDownload))
                .addGap(18, 18, 18)
                .addComponent(jLabelStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelMainContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelStatusBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanelMainContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanelStatusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSelectOutputPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectOutputPathActionPerformed

        File defaultDir = new File(Settings.get("vpg_S_input_dir"));
        JFileChooser fc = new JFileChooser(defaultDir);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int rVal = fc.showOpenDialog(this);

        if (rVal == JFileChooser.APPROVE_OPTION) {
            this.jTextFieldLocalPath.setText(fc.getSelectedFile().toString());
        }
    }//GEN-LAST:event_jButtonSelectOutputPathActionPerformed

    private void jButtonDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDownloadActionPerformed
        
        String pdbid = this.jTextFieldPdbId.getText();
        String fs = System.getProperty("file.separator");
        
        ArrayList<String> warnings = IO.checkPdbIdFormat(pdbid);
        String statusText = "";
        
        File localDir = new File(this.jTextFieldLocalPath.getText());
        
        if( ! (localDir.exists() && localDir.isDirectory() && localDir.canWrite())) {
            warnings.add("ERROR: Specified local output directory does not exist or is not writable.");
        }
        
        if( ! warnings.isEmpty()) {
            for(String w : warnings) { statusText += w + "\n"; }
            this.jTextAreaStatus.setText(statusText);
        }
        else {
            String fileType = "pdb";            
            
            if(this.jRadioButtonPDB.isSelected()) {
                fileType = "pdb";
            } else if(this.jRadioButtonDSSP.isSelected()) {
                fileType = "dssp";
            } else if(this.jRadioButtonBoth.isSelected()) {
                fileType = "both";
            } else {
                fileType = "pdb";
            }
            
            statusText = "Downloading " + fileType + " for " + pdbid + "...\n";
            this.jTextAreaStatus.setText(statusText);
            ArrayList<String> errors;
            
            // download pdb file
            if(fileType.equals("pdb") || fileType.equals("both")) {
                URL downloadUrlPdb = IO.getDownloadUrlPDB(pdbid);
                String downloadFilePdb = new File(downloadUrlPdb.getFile()).getName();
                String outfilePdb = localDir.toString() + fs + downloadFilePdb;                    
                statusText += "Downloading PDB file for " + pdbid + " from '" + downloadUrlPdb.toString() + "' to '" + outfilePdb + "'...\n";
                this.jTextAreaStatus.setText(statusText);
                errors = IO.wget(downloadUrlPdb, outfilePdb);
                
                if( ! errors.isEmpty()) {
                    for(String e : errors) { statusText += e + "\n"; }                
                } else {
                    statusText += "Download of PDB file ok.\n";
                }
                this.jTextAreaStatus.setText(statusText);
            }
            
            // download dssp file
            if(fileType.equals("dssp") || fileType.equals("both")) {
                URL downloadUrlDssp = IO.getDownloadUrlDSSP(pdbid);
                String downloadFileDssp = new File(downloadUrlDssp.getFile()).getName();
                String outfileDssp = localDir.toString() + fs + downloadFileDssp;                    
                statusText += "Downloading DSSP file for " + pdbid + " from '" + downloadUrlDssp.toString() + "' to '" + outfileDssp + "'...\n";
                this.jTextAreaStatus.setText(statusText);
                errors = IO.wget(downloadUrlDssp, outfileDssp);
                
                if( ! errors.isEmpty()) {
                    for(String e : errors) { statusText += e + "\n"; }                
                } else {
                    statusText += "Download of DSSP file ok.\n";
                }
                this.jTextAreaStatus.setText(statusText);
            }
            
        }
    }//GEN-LAST:event_jButtonDownloadActionPerformed

    
    /**
     * Item listener implementation.
     * @param e the DocumentEvent to handle
     */
    @Override public void changedUpdate(DocumentEvent e) {
        this.checkInput();                
    }
    
    /**
     * Item listener implementation.
     * @param e the DocumentEvent to handle
     */
    @Override public void removeUpdate(DocumentEvent e) {
        this.checkInput();
    }    
    
    /**
     * Item listener implementation.
     * @param e the DocumentEvent to handle
     */
    @Override public void insertUpdate(DocumentEvent e) {
        this.checkInput();
    }
    
    
    /**
     * Checks input in the text fields of this form and colors them red if something is wrong with their current content.
     */
    private void checkInput() {
        File localDir = new File(this.jTextFieldLocalPath.getText());
        String statusText = "";
        
        if(localDir.isDirectory() && localDir.canWrite()) {
            this.jTextFieldLocalPath.setBackground(Color.WHITE);
            this.jTextFieldLocalPath.setToolTipText("The local directory where the downloaded files are stored.");
            statusText += "Local download directory is ok.\n";
        } else {
            this.jTextFieldLocalPath.setBackground(Color.RED);
            this.jTextFieldLocalPath.setToolTipText("That directory does not exist or is not writeable.");
            statusText += "ERROR: Local download directory does not exist or is not writeable.\n";
        }
        
        String pdbid = this.jTextFieldPdbId.getText();
        if(pdbid.length() == 4) {
            this.jTextFieldPdbId.setBackground(Color.WHITE);
            this.jTextFieldPdbId.setToolTipText("The PDB identifier of the protein. You can get it at the RCSB Protein Data Bank website.");
            statusText += "Format of PDB identifier looks good.\n";
        } else {
            this.jTextFieldPdbId.setBackground(Color.RED);
            this.jTextFieldPdbId.setToolTipText("A PDB identifier should be 4 characters long. You can get it at the RCSB Protein Data Bank website.");            
            statusText += "WARNING: Format of PDB identifier seems wrong, should be 4 characters long.\n";
        }
        this.jTextAreaStatus.setText(statusText);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VpgDownloadFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VpgDownloadFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VpgDownloadFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VpgDownloadFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new VpgDownloadFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupDownloadWhat;
    private javax.swing.JButton jButtonDownload;
    private javax.swing.JButton jButtonSelectOutputPath;
    private javax.swing.JLabel jLabelFileType;
    private javax.swing.JLabel jLabelLocalPath;
    private javax.swing.JLabel jLabelPdbId;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JLabel jLabelStatusBar;
    private javax.swing.JPanel jPanelMainContent;
    private javax.swing.JPanel jPanelStatusBar;
    private javax.swing.JRadioButton jRadioButtonBoth;
    private javax.swing.JRadioButton jRadioButtonDSSP;
    private javax.swing.JRadioButton jRadioButtonPDB;
    private javax.swing.JScrollPane jScrollPaneStatus;
    private javax.swing.JTextArea jTextAreaStatus;
    private javax.swing.JTextField jTextFieldLocalPath;
    private javax.swing.JTextField jTextFieldPdbId;
    // End of variables declaration//GEN-END:variables
}
