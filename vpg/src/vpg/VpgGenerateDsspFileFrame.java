/*
 * This file is part of the Visualization of Protein Ligand Graphs (VPLG) software package.
 *
 * Copyright Tim Sch√§fer 2012. VPLG is free software, see the LICENSE and README files for details.
 *
 * @author ts
 */
package vpg;

import java.awt.Color;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author ts
 */
public class VpgGenerateDsspFileFrame extends javax.swing.JFrame implements ItemListener, DocumentListener {

    /**
     * Creates new form VpgGenerateDsspFileFrame
     */
    public VpgGenerateDsspFileFrame() {
        initComponents();
        String fs = System.getProperty("file.separator");
        
        this.jTextFieldCustomDsspOutputPath.getDocument().addDocumentListener(this);
        this.jTextFieldCustomModel.getDocument().addDocumentListener(this);
        //this.jTextFieldDsspInputPdbFile.getDocument().addDocumentListener(this);
        this.jTextFieldInputPdbFile.getDocument().addDocumentListener(this);
        
        this.jCheckBoxCustomDsspOutputPath.addItemListener(this);
        this.jCheckBoxInputPdbFileIsGzipped.addItemListener(this);
        this.jCheckBoxSplitPdbOptAllowOverwrite.addItemListener(this);
        this.jCheckBoxSplitPdbOptCustomModel.addItemListener(this);
        this.jCheckBoxSplitPdbOptRun.addItemListener(this);
        this.jCheckBoxSplitPdbOptCustomOutfile.addItemListener(this);
        this.jCheckBoxDsspOptRun.addItemListener(this);
        
        this.jTextFieldDsspInputPdbFile.setToolTipText("Currently '" + this.determineDsspInputFile() + "'.");
        this.jTextFieldInputPdbFile.setText(Settings.get("vpg_S_input_dir") + fs + "8icd.pdb");
        this.jTextFieldSplitPdbCustomOutfile.setText(Settings.get("vpg_S_input_dir") + fs + "8icd.pdb.split");
        this.jTextFieldCustomDsspOutputPath.setText(Settings.get("vpg_S_input_dir") + fs + "8icd.dssp");
        this.checkInput();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelMainContent = new javax.swing.JPanel();
        jLabelInputPdbFile = new javax.swing.JLabel();
        jTextFieldInputPdbFile = new javax.swing.JTextField();
        jButtonSelectPpdInputFile = new javax.swing.JButton();
        jLabelSplitPdbOptions = new javax.swing.JLabel();
        jCheckBoxInputPdbFileIsGzipped = new javax.swing.JCheckBox();
        jCheckBoxSplitPdbOptRun = new javax.swing.JCheckBox();
        jCheckBoxSplitPdbOptCustomModel = new javax.swing.JCheckBox();
        jTextFieldCustomModel = new javax.swing.JTextField();
        jLabelDsspOptions = new javax.swing.JLabel();
        jCheckBoxSplitPdbOptAllowOverwrite = new javax.swing.JCheckBox();
        jLabelDsspInputPdbFile = new javax.swing.JLabel();
        jTextFieldDsspInputPdbFile = new javax.swing.JTextField();
        jCheckBoxCustomDsspOutputPath = new javax.swing.JCheckBox();
        jTextFieldCustomDsspOutputPath = new javax.swing.JTextField();
        jLabelResults = new javax.swing.JLabel();
        jScrollPaneResultsArea = new javax.swing.JScrollPane();
        jTextAreaResults = new javax.swing.JTextArea();
        jButtonRun = new javax.swing.JButton();
        jButtonCustomDsspOutputPath = new javax.swing.JButton();
        jCheckBoxSplitPdbOptCustomOutfile = new javax.swing.JCheckBox();
        jLabelSplitPdbCommand = new javax.swing.JLabel();
        jTextFieldSplitPdbCustomOutfile = new javax.swing.JTextField();
        jCheckBoxDsspOptRun = new javax.swing.JCheckBox();
        jSeparatorSplitPdbDssp = new javax.swing.JSeparator();
        jLabelDsspCmd = new javax.swing.JLabel();
        jScrollPaneSplitPdbCmd = new javax.swing.JScrollPane();
        jTextFieldSplitPdbCommand = new javax.swing.JTextField();
        jScrollPaneDsspCmd = new javax.swing.JScrollPane();
        jTextFieldDsspCommand = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jCheckBoxDeleteSplitAfterDsspRun = new javax.swing.JCheckBox();
        jPanelStatus = new javax.swing.JPanel();
        jLabelStatus = new javax.swing.JLabel();

        setTitle("VPG -- Generate DSSP file");

        jLabelInputPdbFile.setText("Input PDB file");

        jTextFieldInputPdbFile.setText("/home/ts/data/PDB/8icd.pdb");
        jTextFieldInputPdbFile.setToolTipText("The PDB input file");

        jButtonSelectPpdInputFile.setText("Select...");
        jButtonSelectPpdInputFile.setToolTipText("Select PDB input file");
        jButtonSelectPpdInputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectPpdInputFileActionPerformed(evt);
            }
        });

        jLabelSplitPdbOptions.setText("SplitPDB options");

        jCheckBoxInputPdbFileIsGzipped.setText("is gzipped");
        jCheckBoxInputPdbFileIsGzipped.setToolTipText("Whether the input PDB file is zipped.");

        jCheckBoxSplitPdbOptRun.setSelected(true);
        jCheckBoxSplitPdbOptRun.setText("Run SplitPDB");
        jCheckBoxSplitPdbOptRun.setToolTipText("Whether to run SplitPDB. Not required for PDB files with only 1 model, but won't hurt even in that case. If in doubt, run it.");

        jCheckBoxSplitPdbOptCustomModel.setText("Extract data on custom model:");
        jCheckBoxSplitPdbOptCustomModel.setToolTipText("Extract data on a specific model instead using the first model. It is an error if this option is selected but no such model exists.");

        jTextFieldCustomModel.setText("1");
        jTextFieldCustomModel.setToolTipText("The model ID from the PDB file. Has to exist.");
        jTextFieldCustomModel.setEnabled(false);

        jLabelDsspOptions.setText("DSSP options");
        jLabelDsspOptions.setToolTipText("Options for dsspcmbi.");

        jCheckBoxSplitPdbOptAllowOverwrite.setSelected(true);
        jCheckBoxSplitPdbOptAllowOverwrite.setText("Allow overwriting of existing output files");
        jCheckBoxSplitPdbOptAllowOverwrite.setToolTipText("Overwrites existing output files.");

        jLabelDsspInputPdbFile.setText("Input PDB file:");
        jLabelDsspInputPdbFile.setToolTipText("The input file for DSSP. Depends on whether SplitPDB is run or not.");

        jTextFieldDsspInputPdbFile.setBackground(new java.awt.Color(200, 200, 200));
        jTextFieldDsspInputPdbFile.setEditable(false);
        jTextFieldDsspInputPdbFile.setText("<The SplitPDB output file>");

        jCheckBoxCustomDsspOutputPath.setText("Custom DSSP output path:");
        jCheckBoxCustomDsspOutputPath.setToolTipText("Where to store the DSSP output file.");

        jTextFieldCustomDsspOutputPath.setEditable(false);
        jTextFieldCustomDsspOutputPath.setText("/home/ts/data/PDB/8icd.dssp");
        jTextFieldCustomDsspOutputPath.setToolTipText("Custom output path for the DSSP file.");
        jTextFieldCustomDsspOutputPath.setEnabled(false);

        jLabelResults.setText("Status");
        jLabelResults.setToolTipText("Current status.");

        jTextAreaResults.setBackground(new java.awt.Color(200, 200, 200));
        jTextAreaResults.setColumns(20);
        jTextAreaResults.setEditable(false);
        jTextAreaResults.setRows(5);
        jTextAreaResults.setText("Checking settings...");
        jTextAreaResults.setToolTipText("Shows status information.");
        jScrollPaneResultsArea.setViewportView(jTextAreaResults);

        jButtonRun.setText("Generate files");
        jButtonRun.setToolTipText("Run the selected tools.");
        jButtonRun.setEnabled(false);
        jButtonRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRunActionPerformed(evt);
            }
        });

        jButtonCustomDsspOutputPath.setText("Select...");
        jButtonCustomDsspOutputPath.setToolTipText("Select a custom output path for the resulting DSSP file.");
        jButtonCustomDsspOutputPath.setEnabled(false);
        jButtonCustomDsspOutputPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCustomDsspOutputPathActionPerformed(evt);
            }
        });

        jCheckBoxSplitPdbOptCustomOutfile.setText("Custom output file:");
        jCheckBoxSplitPdbOptCustomOutfile.setToolTipText("You can set a custom path for the SplitPDB output file here.");

        jLabelSplitPdbCommand.setText("Resulting command:");
        jLabelSplitPdbCommand.setToolTipText("The SplitPDB command that will be run.");

        jTextFieldSplitPdbCustomOutfile.setText("/home/ts/data/PDB/8icd.pdb.split");
        jTextFieldSplitPdbCustomOutfile.setEnabled(false);

        jCheckBoxDsspOptRun.setSelected(true);
        jCheckBoxDsspOptRun.setText("Run dsspcmbi by Kabsch & Sander");
        jCheckBoxDsspOptRun.setToolTipText("Whether to run dsspcmbi by Kabsch and Sander. You need to run this to get a DSSP file.");

        jLabelDsspCmd.setText("Resulting DSSP command:");
        jLabelDsspCmd.setToolTipText("The DSSP command that will be run.");

        jScrollPaneSplitPdbCmd.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPaneSplitPdbCmd.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextFieldSplitPdbCommand.setBackground(new java.awt.Color(200, 200, 200));
        jTextFieldSplitPdbCommand.setEditable(false);
        jTextFieldSplitPdbCommand.setText("Checking command...");
        jScrollPaneSplitPdbCmd.setViewportView(jTextFieldSplitPdbCommand);

        jScrollPaneDsspCmd.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPaneDsspCmd.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextFieldDsspCommand.setBackground(new java.awt.Color(200, 200, 200));
        jTextFieldDsspCommand.setEditable(false);
        jTextFieldDsspCommand.setText("Checking command...");
        jScrollPaneDsspCmd.setViewportView(jTextFieldDsspCommand);

        jCheckBoxDeleteSplitAfterDsspRun.setText("Delete output after successful DSSP run");
        jCheckBoxDeleteSplitAfterDsspRun.setToolTipText("When this is selected, the output file of SplitPDB is deleted after a successful run of dsspcmbi.");

        javax.swing.GroupLayout jPanelMainContentLayout = new javax.swing.GroupLayout(jPanelMainContent);
        jPanelMainContent.setLayout(jPanelMainContentLayout);
        jPanelMainContentLayout.setHorizontalGroup(
            jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMainContentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparatorSplitPdbDssp, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelMainContentLayout.createSequentialGroup()
                        .addComponent(jLabelInputPdbFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldInputPdbFile, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jCheckBoxInputPdbFileIsGzipped)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                        .addComponent(jButtonSelectPpdInputFile))
                    .addGroup(jPanelMainContentLayout.createSequentialGroup()
                        .addGap(0, 476, Short.MAX_VALUE)
                        .addComponent(jButtonRun))
                    .addComponent(jScrollPaneResultsArea, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
                    .addComponent(jLabelResults, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelMainContentLayout.createSequentialGroup()
                        .addComponent(jLabelDsspCmd)
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPaneDsspCmd, javax.swing.GroupLayout.PREFERRED_SIZE, 422, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelMainContentLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelMainContentLayout.createSequentialGroup()
                                .addGroup(jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBoxSplitPdbOptRun)
                                    .addComponent(jCheckBoxSplitPdbOptAllowOverwrite))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                                .addGroup(jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanelMainContentLayout.createSequentialGroup()
                                        .addComponent(jCheckBoxSplitPdbOptCustomModel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldCustomModel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jCheckBoxDeleteSplitAfterDsspRun))
                                .addGap(63, 63, 63))
                            .addGroup(jPanelMainContentLayout.createSequentialGroup()
                                .addComponent(jLabelSplitPdbCommand)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPaneSplitPdbCmd, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE))
                            .addGroup(jPanelMainContentLayout.createSequentialGroup()
                                .addComponent(jCheckBoxSplitPdbOptCustomOutfile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldSplitPdbCustomOutfile, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelMainContentLayout.createSequentialGroup()
                        .addComponent(jLabelDsspInputPdbFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldDsspInputPdbFile, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE))
                    .addComponent(jLabelSplitPdbOptions, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelMainContentLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelMainContentLayout.createSequentialGroup()
                                .addComponent(jCheckBoxCustomDsspOutputPath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldCustomDsspOutputPath, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonCustomDsspOutputPath))
                            .addComponent(jCheckBoxDsspOptRun)
                            .addComponent(jLabelDsspOptions))))
                .addContainerGap())
        );
        jPanelMainContentLayout.setVerticalGroup(
            jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMainContentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelInputPdbFile)
                    .addComponent(jTextFieldInputPdbFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSelectPpdInputFile)
                    .addComponent(jCheckBoxInputPdbFileIsGzipped))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelSplitPdbOptions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxSplitPdbOptRun)
                    .addComponent(jCheckBoxSplitPdbOptCustomModel)
                    .addComponent(jTextFieldCustomModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxSplitPdbOptAllowOverwrite)
                    .addComponent(jCheckBoxDeleteSplitAfterDsspRun))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxSplitPdbOptCustomOutfile)
                    .addComponent(jTextFieldSplitPdbCustomOutfile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelSplitPdbCommand)
                    .addComponent(jScrollPaneSplitPdbCmd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparatorSplitPdbDssp, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jLabelDsspOptions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxDsspOptRun)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxCustomDsspOutputPath)
                    .addComponent(jTextFieldCustomDsspOutputPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCustomDsspOutputPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelDsspCmd)
                    .addComponent(jScrollPaneDsspCmd, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelMainContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelDsspInputPdbFile)
                    .addComponent(jTextFieldDsspInputPdbFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabelResults)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneResultsArea, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonRun))
        );

        jLabelStatus.setText("DSSP File creator ready.");

        javax.swing.GroupLayout jPanelStatusLayout = new javax.swing.GroupLayout(jPanelStatus);
        jPanelStatus.setLayout(jPanelStatusLayout);
        jPanelStatusLayout.setHorizontalGroup(
            jPanelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 597, Short.MAX_VALUE)
            .addGroup(jPanelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelStatusLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanelStatusLayout.setVerticalGroup(
            jPanelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 28, Short.MAX_VALUE)
            .addGroup(jPanelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelStatusLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 16, Short.MAX_VALUE)
                    .addGap(1, 1, 1)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelMainContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanelMainContent, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSelectPpdInputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectPpdInputFileActionPerformed

        File defaultDir = new File(Settings.get("vpg_S_input_dir"));
        JFileChooser fc = new JFileChooser(defaultDir);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int rVal = fc.showOpenDialog(this);

        if (rVal == JFileChooser.APPROVE_OPTION) {
            this.jTextFieldInputPdbFile.setText(fc.getSelectedFile().toString());
        }
    }//GEN-LAST:event_jButtonSelectPpdInputFileActionPerformed

    private void jButtonCustomDsspOutputPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCustomDsspOutputPathActionPerformed

        File defaultDir = new File(Settings.get("vpg_S_input_dir"));
        JFileChooser fc = new JFileChooser(defaultDir);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int rVal = fc.showOpenDialog(this);

        if (rVal == JFileChooser.APPROVE_OPTION) {
            this.jTextFieldCustomDsspOutputPath.setText(fc.getSelectedFile().toString());
        }
    }//GEN-LAST:event_jButtonCustomDsspOutputPathActionPerformed

    /**
     * Returns the working directory for the SplitPDB command.
     * @return the directory
     */
    private File getWorkingDirSplitPdbFromForm() {
        return new File(Settings.get("vpg_S_path_splitpdb")).getAbsoluteFile().getParentFile();
    }
    
    /**
     * Returns the working directory for the DSSP command.
     * @return the directory
     */
    private File getWorkingDirDsspFromForm() {
        return new File(Settings.get("vpg_S_path_dssp")).getAbsoluteFile().getParentFile();
    }
    
    
    private void jButtonRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRunActionPerformed

        String [] cmdSplitPdb = this.getCommandArraySplitPDB();
        String [] cmdDssp = this.getCommandArrayDSSP();
        
        Boolean runSplitPDB = (cmdSplitPdb != null);
        Boolean runDSSP = (cmdDssp != null);
        
        File workingDirSplitPdb = this.getWorkingDirSplitPdbFromForm();
        File workingDirDssp = this.getWorkingDirDsspFromForm();
        
        
        Boolean splitPdbRunFailed = false;
        Boolean dsspRunFailed = false;
        String program;
        String resText = "";
        
        // ---------------------------------  Run SplitPDB --------------------------------------
        program = "SplitPDB";        
        if(runSplitPDB) {                    
            System.out.println(Settings.getApptag() + "Running " + program + "...");
            this.jTextAreaResults.setText("Running " + program + "...");
            

            try {
                String[] inputAndError = IO.execCmd(cmdSplitPdb, workingDirSplitPdb);
                Integer retVal = Integer.valueOf(inputAndError[2]);
                System.out.println(Settings.getApptag() + "Finished running " + program + " with return value " + retVal.toString() + ".");
                System.out.println(Settings.getApptag() + program + " output follows:\n" + inputAndError[0]);
                System.out.println(Settings.getApptag() + "End of " + program + " output.");
                if( ! inputAndError[1].isEmpty()) {
                    System.out.println(Settings.getApptag() + program + " errors and warnings follow:\n" + inputAndError[1]);
                    System.out.println(Settings.getApptag() + "End of " + program + " errors and warnings.");
                } else {
                    System.out.println(Settings.getApptag() + program + " wrote no errors or warnings.");
                }
                resText = "Finished running " + program + " with return value " + retVal.toString() + ".\n";
                if(retVal == 0 || retVal == 2) {
                    resText += "OK: Process terminated as expected.\n";
                    if(retVal == 2) { resText += "NOTE: Input file contained no models, nothing filtered (this is fine).\n"; }
                    resText += "Output file is at '" + this.getOutputFileSplitPDB() + "'.\n";
                } else {
                    splitPdbRunFailed = true;
                    resText += "ERROR: Running " + program + " failed, see the " + program + " output below for details:\n-------------------------------------------------\n";
                    resText += inputAndError[1];
                }
                
                this.jTextAreaResults.setText(resText);

            } catch(Exception e) {
                splitPdbRunFailed = true;
                System.err.println(Settings.getApptag() + "ERROR running " + program + ": '" + e.getMessage() + "'.");
                this.jTextAreaResults.setText("ERROR running " + program + ": '" + e.getMessage() + "'.");
            }
        } else {
            System.out.println(Settings.getApptag() + "Not running " + program + ".");
        }
        
        // ---------------------------------  Run DSSP --------------------------------------
        program = "Dsspcmbi";        
        if(runDSSP) {    
            
            if(splitPdbRunFailed) {
                System.out.println(Settings.getApptag() + "Not running " + program + " because SplitPDB run failed and its output is required.");
                resText += "Not running " + program + " because SplitPDB run failed and its output is required.\n";
                this.jTextAreaResults.setText(resText);
                return;
            }
            
            System.out.println(Settings.getApptag() + "Running " + program + "...");
            resText += "Running " + program + "...\n";

            try {
                String[] inputAndError = IO.execCmd(cmdDssp, workingDirDssp);
                Integer retVal = Integer.valueOf(inputAndError[2]);
                System.out.println(Settings.getApptag() + "Finished running " + program + " with return value " + retVal.toString() + ".");
                System.out.println(Settings.getApptag() + program + " output follows:\n" + inputAndError[0]);
                System.out.println(Settings.getApptag() + "End of " + program + " output.");
                if( ! inputAndError[1].isEmpty()) {
                    System.out.println(Settings.getApptag() + program + " errors and warnings follow:\n" + inputAndError[1]);
                    System.out.println(Settings.getApptag() + "End of " + program + " errors and warnings.");
                } else {
                    System.out.println(Settings.getApptag() + program + " wrote no errors or warnings.");
                }
                resText += "Finished running " + program + " with return value " + retVal.toString() + ".\n";
                if(retVal == 0) {
                    resText += "OK: Process terminated as expected.\n";
                    resText += "Output file is at '" + this.getOutputFileDssp() + "'.\n";
                } else {
                    dsspRunFailed = true;
                    resText += "ERROR: Running " + program + " failed, see the " + program + " output below for details:\n-------------------------------------------------\n";
                    resText += inputAndError[1];
                }
                
                this.jTextAreaResults.setText(resText);


            } catch(Exception e) {
                dsspRunFailed = true;
                System.err.println(Settings.getApptag() + "ERROR running " + program + ": '" + e.getMessage() + "'.");
                resText += "ERROR running " + program + ": '" + e.getMessage() + "'.";
                this.jTextAreaResults.setText(resText);
            }
        } else {
            System.out.println(Settings.getApptag() + "Not running " + program + ".");
        }
        
        // Delete tmp splitppb output file if both programs were run successfully and the user asked for it
        if(runSplitPDB && runDSSP) {
            if( (! splitPdbRunFailed) && (! dsspRunFailed) ) {
                if(this.jCheckBoxDeleteSplitAfterDsspRun.isSelected()) {
                    File tmpSplitPdbOutput = new File(this.getOutputFileSplitPDB());
                    if(tmpSplitPdbOutput.isFile() && tmpSplitPdbOutput.canWrite()) {
                        if(tmpSplitPdbOutput.delete()) {
                            System.out.println(Settings.getApptag() + "Deleted temporary PDB file created by SplitPDB.");
                            resText += "Deleted temporary PDB file created by SplitPDB at '" + this.getOutputFileSplitPDB() + "'.";
                        } else {
                            System.err.println(Settings.getApptag() + "WARNING: Could not delete temporary PDB file created by SplitPDB at '" + this.getOutputFileSplitPDB() + "'.");
                            resText += "WARNING: Could not delete temporary PDB file created by SplitPDB at '" + this.getOutputFileSplitPDB() + "'.";
                        }
                        this.jTextAreaResults.setText(resText);
                    }
                }
            }
        }
        
        this.jButtonRun.setEnabled(false);
        //this.checkInput();
    }//GEN-LAST:event_jButtonRunActionPerformed

    public String getOutputFileSplitPDB() {
        return this.jTextFieldSplitPdbCustomOutfile.getText();
    }
    
    public String getOutputFileDssp() {
        return this.jTextFieldCustomDsspOutputPath.getText();
    }
    
    
    /**
     * Item listener implementation.
     * @param e the DocumentEvent to handle
     */
    @Override public void changedUpdate(DocumentEvent e) {
        this.setZippedCheckbox(e);
        this.checkInput();
    }
    
    /**
     * Item listener implementation.
     * @param e the DocumentEvent to handle
     */
    @Override public void removeUpdate(DocumentEvent e) {
        this.setZippedCheckbox(e);
        this.checkInput();        
    }    
    
    /**
     * Item listener implementation.
     * @param e the DocumentEvent to handle
     */
    @Override public void insertUpdate(DocumentEvent e) {
        this.setZippedCheckbox(e);
        this.checkInput();
    }
    
    /**
     * Validates the form input and marks invalid fields red. Also enables the run button if everything was ok.
     * @return true if everything seems fine, false if some input was invalid
     */
    public Boolean checkInput() {
        System.out.println("Checking input...");
        Boolean ok = true;
        
        String statusText = "";
        
        // --------------------- check binaries --------------------------
        
        File splitPdbJar = new File(Settings.get("vpg_S_path_splitpdb"));
        if( ! (splitPdbJar.isFile() && splitPdbJar.canRead())) {
            statusText += "ERROR: Path to SplitPDB JAR file is not configured properly in settings: '" + Settings.get("vpg_S_path_splitpdb") + "'\n";
            ok = false;
        } else {
            System.out.println(Settings.getApptag() + "SplitPDB JAR path ok.");
        }
        
        File dsspcmbi = new File(Settings.get("vpg_S_path_dssp"));
        if( ! (dsspcmbi.isFile() && dsspcmbi.canExecute())) {
            statusText += "ERROR: Path to dsspcmbi is not configured properly in settings or file not executable: '" + Settings.get("vpg_S_path_dssp") + "'.\n";
            ok = false;
        } else {
            System.out.println(Settings.getApptag() + "Dsspcmbi path ok.");
        }
        
        if(! ok) { statusText += "Please fix the settings.\n"; }
        else { statusText += "Executables seem ok.\n"; }
        
        // --------------------- check output paths ----------------------
        
        
        File splitPdbOutputPath = new File(this.jTextFieldSplitPdbCustomOutfile.getText()).getParentFile();
        if( ! (splitPdbOutputPath.isDirectory() && splitPdbOutputPath.canWrite())) {
            statusText += "ERROR: SplitPDB output directory '" + splitPdbOutputPath.getAbsolutePath() + "' is not writeable or does not exist.\n";
            this.jTextFieldSplitPdbCustomOutfile.setBackground(Color.RED);
            ok = false;
        } else {
            System.out.println(Settings.getApptag() + "SplitPDB output path ok.");
            this.jTextFieldSplitPdbCustomOutfile.setBackground(Color.WHITE);
        }
        
        File splitPdbOutputFile = new File(this.jTextFieldSplitPdbCustomOutfile.getText());
        if(splitPdbOutputFile.exists() && ! this.jCheckBoxSplitPdbOptAllowOverwrite.isSelected()) {
            ok = false;
            statusText += "ERROR: SplitPDB output file exists and overwriting is not allowed.\n";
            this.jTextFieldSplitPdbCustomOutfile.setBackground(Color.RED);
        } else {
            this.jTextFieldSplitPdbCustomOutfile.setBackground(Color.WHITE);
        }
        
        File dsspOutputPath = new File(this.jTextFieldCustomDsspOutputPath.getText()).getParentFile();
        if(dsspOutputPath == null) {
            statusText += "ERROR: Dsspcmbi output directory invalid.\n";
            this.jTextFieldCustomDsspOutputPath.setBackground(Color.RED);
            ok = false;
            
        } else {
        
            if( ! (dsspOutputPath.isDirectory() && dsspOutputPath.canWrite())) {
                statusText += "ERROR: Dsspcmbi output directory '" + dsspOutputPath.getAbsolutePath() + "' is not writeable or does not exist.\n";
                this.jTextFieldCustomDsspOutputPath.setBackground(Color.RED);
                ok = false;
            } else {
                System.out.println(Settings.getApptag() + "Dsspcmbi output path ok.");
                this.jTextFieldCustomDsspOutputPath.setBackground(Color.WHITE);
            }
        }
        // --------------------- check options ----------------------
        
        File inputFilePdb = new File(this.jTextFieldInputPdbFile.getText());
        if( ! (inputFilePdb.isFile() && inputFilePdb.canRead())) {
            ok = false;
            this.jTextFieldInputPdbFile.setBackground(Color.RED);
            statusText += "ERROR: Cannot read input PDB file '" + inputFilePdb.getAbsolutePath() + "'.";
        } else {
            this.jTextFieldInputPdbFile.setBackground(Color.WHITE);
            statusText += "Input PDB file '" + inputFilePdb.getAbsolutePath() + "' seems ok.";
        }
        
        //if(this.jTextFieldInputPdbFile.getText().endsWith(".gz")) {
        //    this.jCheckBoxInputPdbFileIsGzipped.setSelected(true);
        //}
        
        if(this.jCheckBoxSplitPdbOptCustomModel.isSelected()) {
            if(this.jTextFieldCustomModel.getText().length() < 1) {
                statusText += "ERROR: Custom model ID must have at least 1 character.";
                this.jTextFieldCustomModel.setBackground(Color.RED);
                ok = false;
            } else {
                this.jTextFieldCustomModel.setBackground(Color.WHITE);
            }
        }
        
        
        // ---------------------- set button ----------------------------
        
        if(ok) {
            this.jButtonRun.setEnabled(true);
            this.jLabelStatus.setText("Settings seem ok.");
            this.jTextAreaResults.setText(statusText);
        } else {
            this.jButtonRun.setEnabled(false);
            this.jLabelStatus.setText("Settings invalid, please fix.");
            this.jTextAreaResults.setText(statusText);
        }
        
        if( (! this.jCheckBoxDsspOptRun.isSelected()) && (! this.jCheckBoxSplitPdbOptRun.isSelected())) {
            this.jButtonRun.setEnabled(false);
            this.jTextAreaResults.setText("Nothing to do, both SplitPDB and DSSP are disabled.");
        }
        
        this.showCommandLines();
        
        return(ok);        
    }
    
    /**
     * Sets the selection of the gzipped checkbox depending on the file extension of the input file.
     * @param e the document event triggered by editing the input file text field
     */
    private void setZippedCheckbox(DocumentEvent e) {
        if(e.getDocument() == this.jTextFieldInputPdbFile.getDocument()) {
            //System.out.println("change DSSP");
            if(this.jTextFieldInputPdbFile.getText().endsWith(".gz")) {
                this.jCheckBoxInputPdbFileIsGzipped.setSelected(true);
            } else {
                this.jCheckBoxInputPdbFileIsGzipped.setSelected(false);
            }        
        } else {
            //System.out.println("change other");
        }        
    }
    
    
    @Override public void itemStateChanged(ItemEvent e) {
        Object source = e.getItemSelectable();

        if (source == this.jCheckBoxSplitPdbOptCustomModel) {                        
            if (e.getStateChange() == ItemEvent.SELECTED) {
                this.jTextFieldCustomModel.setEnabled(true);
            } else if(e.getStateChange() == ItemEvent.DESELECTED) {
                this.jTextFieldCustomModel.setEnabled(false);
            }                        
        } 
        else if (source == this.jCheckBoxCustomDsspOutputPath) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                this.jTextFieldCustomDsspOutputPath.setEnabled(true);
                this.jButtonCustomDsspOutputPath.setEnabled(true);
            } else if(e.getStateChange() == ItemEvent.DESELECTED) {
                this.jTextFieldCustomDsspOutputPath.setEnabled(false);
                this.jButtonCustomDsspOutputPath.setEnabled(false);                
            }             
        }
        else if (source == this.jCheckBoxSplitPdbOptRun) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                this.jCheckBoxSplitPdbOptAllowOverwrite.setEnabled(true);
                this.jCheckBoxSplitPdbOptCustomModel.setEnabled(true);
                this.jCheckBoxSplitPdbOptCustomOutfile.setEnabled(true);                                
                this.jTextFieldDsspInputPdbFile.setText("<The SplitPDB output file>");
                
                if(this.jCheckBoxDsspOptRun.isSelected()) {
                    this.jCheckBoxDeleteSplitAfterDsspRun.setEnabled(true);
                } else {
                    this.jCheckBoxDeleteSplitAfterDsspRun.setEnabled(false);
                }
                
            } else if(e.getStateChange() == ItemEvent.DESELECTED) {
                this.jCheckBoxSplitPdbOptAllowOverwrite.setEnabled(false);
                this.jCheckBoxSplitPdbOptCustomModel.setEnabled(false);
                this.jCheckBoxSplitPdbOptCustomOutfile.setEnabled(false);
                this.jCheckBoxDeleteSplitAfterDsspRun.setEnabled(false);
                this.jTextFieldDsspInputPdbFile.setText("<The PDB file defined above>");
            }             
            this.jTextFieldDsspInputPdbFile.setToolTipText("Currently '" + this.determineDsspInputFile() + "'.");
            
        }
        else if (source == this.jCheckBoxDsspOptRun) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                this.jCheckBoxCustomDsspOutputPath.setEnabled(true);                
                
                if(this.jCheckBoxSplitPdbOptRun.isSelected()) {
                    this.jCheckBoxDeleteSplitAfterDsspRun.setEnabled(true);
                    this.jTextFieldDsspInputPdbFile.setText("<The SplitPDB output file>");
                } else {
                    this.jCheckBoxDeleteSplitAfterDsspRun.setEnabled(false);
                    this.jTextFieldDsspInputPdbFile.setText("<The PDB file defined above>");
                }
                this.jTextFieldDsspInputPdbFile.setToolTipText("Currently '" + this.determineDsspInputFile() + "'.");
            } else if(e.getStateChange() == ItemEvent.DESELECTED) {
                this.jCheckBoxCustomDsspOutputPath.setEnabled(false); 
                this.jTextFieldDsspInputPdbFile.setText("<Not applicable, not runnning DSSP>");
                this.jTextFieldDsspInputPdbFile.setToolTipText("Currently not used.");   
                this.jCheckBoxDeleteSplitAfterDsspRun.setEnabled(false);
            }                                     
        }
        else if(source == this.jCheckBoxSplitPdbOptCustomOutfile) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                this.jTextFieldSplitPdbCustomOutfile.setEnabled(true);                                
            } else if(e.getStateChange() == ItemEvent.DESELECTED) {
                this.jTextFieldSplitPdbCustomOutfile.setText(this.jTextFieldInputPdbFile.getText() + ".split");
                this.jTextFieldSplitPdbCustomOutfile.setEnabled(false);
            }
        }
        else {
            // no special handling
        }    
                
        this.checkInput();
    }
    
    private String determineDsspInputFile() {
        if(this.jCheckBoxSplitPdbOptRun.isSelected()) {
            return this.jTextFieldSplitPdbCustomOutfile.getText();
        } else {
            return this.jTextFieldInputPdbFile.getText();
        }        
    }
    
    /**
     * Generates the command lines from the form input and shows them in the text fields.
     */
    public void showCommandLines() {
        
        String[] splitPdbCmdArray = this.getCommandArraySplitPDB();        
        String splitPdbCmdString = "";
        
        if(splitPdbCmdArray == null) {
            System.out.println("Not running SplitPDB (received no command line).");
            this.jTextFieldSplitPdbCommand.setText("<Not running SplitPDB>");
        } else {
            for(String s : splitPdbCmdArray) { splitPdbCmdString += s + " "; }      
            this.jTextFieldSplitPdbCommand.setText(splitPdbCmdString);
            System.out.println("SplitPDB command line: '" + splitPdbCmdString + "'.");
        }
        
        
        
        String[] dsspCmdArray = this.getCommandArrayDSSP();
        String dsspCmdString = "";
        if(dsspCmdArray == null) {
            System.out.println("Not running dsspcmbi (received no command line).");
            this.jTextFieldDsspCommand.setText("<Not running DSSP>");
        } else {
            for(String s : dsspCmdArray) { dsspCmdString += s + " "; } 
            this.jTextFieldDsspCommand.setText(dsspCmdString);
            System.out.println("dsspcmbi command line: '" + dsspCmdString + "'.");
        }
        
    }
    
    
    /**
     * Constructs the command array for SplitPDB from the form data.
     * @return the command array or null if SplitPDB should not be run
     */
    public String[] getCommandArraySplitPDB() {
        ArrayList<String> cmdList = new ArrayList<String>();
        
        if(! this.jCheckBoxSplitPdbOptRun.isSelected()) {
            return null;
        }
        
        cmdList.add(Settings.get("vpg_S_java_command"));
        cmdList.add("-jar");
        cmdList.add(Settings.get("vpg_S_path_splitpdb"));
        
        cmdList.add(this.jTextFieldInputPdbFile.getText());
        
        if(this.jCheckBoxInputPdbFileIsGzipped.isSelected()) {
            cmdList.add("--zipped-input");
        }
        
        if(this.jCheckBoxSplitPdbOptAllowOverwrite.isSelected()) {
            cmdList.add("--allow-overwrite");
        }
        
        if(this.jCheckBoxSplitPdbOptCustomModel.isSelected()) {
            cmdList.add("--model");
            cmdList.add(this.jTextFieldCustomModel.getText());
        }
        
        cmdList.add("--outfile");
        cmdList.add(this.jTextFieldSplitPdbCustomOutfile.getText());                        
       

        return cmdList.toArray(new String[cmdList.size()]);
    }
    
    /**
     * Constructs the command array for SplitPDB from the form data.
     * @return the command array or null if dsspcmbi should not be run
     */
    public String[] getCommandArrayDSSP() {
        ArrayList<String> cmdList = new ArrayList<String>();
        
        if(! this.jCheckBoxDsspOptRun.isSelected()) {
            return null;
        }
        
        cmdList.add(Settings.get("vpg_S_path_dssp")); 
        
        cmdList.add("-i");
        cmdList.add(this.determineDsspInputFile());
        
        cmdList.add("-o");
        cmdList.add(this.jTextFieldCustomDsspOutputPath.getText());        
       

        return cmdList.toArray(new String[cmdList.size()]);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VpgGenerateDsspFileFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VpgGenerateDsspFileFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VpgGenerateDsspFileFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VpgGenerateDsspFileFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new VpgGenerateDsspFileFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCustomDsspOutputPath;
    private javax.swing.JButton jButtonRun;
    private javax.swing.JButton jButtonSelectPpdInputFile;
    private javax.swing.JCheckBox jCheckBoxCustomDsspOutputPath;
    private javax.swing.JCheckBox jCheckBoxDeleteSplitAfterDsspRun;
    private javax.swing.JCheckBox jCheckBoxDsspOptRun;
    private javax.swing.JCheckBox jCheckBoxInputPdbFileIsGzipped;
    private javax.swing.JCheckBox jCheckBoxSplitPdbOptAllowOverwrite;
    private javax.swing.JCheckBox jCheckBoxSplitPdbOptCustomModel;
    private javax.swing.JCheckBox jCheckBoxSplitPdbOptCustomOutfile;
    private javax.swing.JCheckBox jCheckBoxSplitPdbOptRun;
    private javax.swing.JLabel jLabelDsspCmd;
    private javax.swing.JLabel jLabelDsspInputPdbFile;
    private javax.swing.JLabel jLabelDsspOptions;
    private javax.swing.JLabel jLabelInputPdbFile;
    private javax.swing.JLabel jLabelResults;
    private javax.swing.JLabel jLabelSplitPdbCommand;
    private javax.swing.JLabel jLabelSplitPdbOptions;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JPanel jPanelMainContent;
    private javax.swing.JPanel jPanelStatus;
    private javax.swing.JScrollPane jScrollPaneDsspCmd;
    private javax.swing.JScrollPane jScrollPaneResultsArea;
    private javax.swing.JScrollPane jScrollPaneSplitPdbCmd;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparatorSplitPdbDssp;
    private javax.swing.JTextArea jTextAreaResults;
    private javax.swing.JTextField jTextFieldCustomDsspOutputPath;
    private javax.swing.JTextField jTextFieldCustomModel;
    private javax.swing.JTextField jTextFieldDsspCommand;
    private javax.swing.JTextField jTextFieldDsspInputPdbFile;
    private javax.swing.JTextField jTextFieldInputPdbFile;
    private javax.swing.JTextField jTextFieldSplitPdbCommand;
    private javax.swing.JTextField jTextFieldSplitPdbCustomOutfile;
    // End of variables declaration//GEN-END:variables
}
