/*
 * This file is part of the Visualization of Protein Ligand Graphs (VPLG) software package.
 *
 * Copyright Tim Sch√§fer 2012. VPLG is free software, see the LICENSE and README files for details.
 *
 * @author ts
 */

package vpg;

import java.awt.Color;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author ts
 */
public class VpgBatchDsspFrame extends javax.swing.JFrame implements ItemListener, DocumentListener {

    private Boolean downloadWarningAlreadyShown;
    
    /**
     * Creates new form VpgBatchDsspFrame
     */
    public VpgBatchDsspFrame() {
        initComponents();
        String fs = System.getProperty("file.separator");
        
        this.downloadWarningAlreadyShown = false;
        if( ! Settings.getBoolean("vpg_B_dssp_download_warning")) {
            this.downloadWarningAlreadyShown = true;
        }
        
        this.jTextFieldDsspOutputDir.setText(System.getProperty("user.home") + fs + "data" + fs  + "DSSP");
        this.jTextFieldPdbFileDirectory.setText(System.getProperty("user.home") + fs + "data" + fs  + "PDB");
        this.jTextFieldPdbSplitOutputDir.setText(System.getProperty("user.home") + fs + "data" + fs  + "PDB_split");
        
        this.jTextFieldDsspOutputDir.getDocument().addDocumentListener(this);
        this.jTextFieldPdbFileDirectory.getDocument().addDocumentListener(this);
        this.jTextFieldPdbSplitOutputDir.getDocument().addDocumentListener(this);
        
        this.jCheckBoxDownloadFailedDsspFiles.addItemListener(this);
        this.jCheckBoxRunSplitPdb.addItemListener(this);
        this.jCheckBoxSkipSplitPdbIfSplitAvailable.addItemListener(this);
        this.jCheckBoxSplitPdbGzippedOutput.addItemListener(this);
        
        this.jComboBoxPutDsspFiles.addItemListener(this);
        this.jComboBoxPutPdbFiles.addItemListener(this);
        
        this.checkInput();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelStatus = new javax.swing.JPanel();
        jLabelStaus = new javax.swing.JLabel();
        jPanelContent = new javax.swing.JPanel();
        jLabelInputFiles = new javax.swing.JLabel();
        jLabelPdbDir = new javax.swing.JLabel();
        jTextFieldPdbFileDirectory = new javax.swing.JTextField();
        jButtonSelectPdbDir = new javax.swing.JButton();
        jSeparatorTop = new javax.swing.JSeparator();
        jLabeloptions = new javax.swing.JLabel();
        jCheckBoxRunSplitPdb = new javax.swing.JCheckBox();
        jCheckBoxSkipSplitPdbIfSplitAvailable = new javax.swing.JCheckBox();
        jCheckBoxSplitPdbGzippedOutput = new javax.swing.JCheckBox();
        jLabelPutPdbFiles = new javax.swing.JLabel();
        jComboBoxPutPdbFiles = new javax.swing.JComboBox();
        jTextFieldPdbSplitOutputDir = new javax.swing.JTextField();
        jButtonSelectPdbSplitOutputDir = new javax.swing.JButton();
        jCheckBoxDownloadFailedDsspFiles = new javax.swing.JCheckBox();
        jLabelPutDsspFiles = new javax.swing.JLabel();
        jComboBoxPutDsspFiles = new javax.swing.JComboBox();
        jTextFieldDsspOutputDir = new javax.swing.JTextField();
        jButtonSelectDsspOutputDir = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jButtonRunBatchDssp = new javax.swing.JButton();
        jButtonCheckSettings = new javax.swing.JButton();

        setTitle("VPG -- Batch DSSP file processing");

        jLabelStaus.setText("VPG batch DSSP file creator ready.");

        javax.swing.GroupLayout jPanelStatusLayout = new javax.swing.GroupLayout(jPanelStatus);
        jPanelStatus.setLayout(jPanelStatusLayout);
        jPanelStatusLayout.setHorizontalGroup(
            jPanelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelStaus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanelStatusLayout.setVerticalGroup(
            jPanelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelStaus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
        );

        jLabelInputFiles.setText("Input files");

        jLabelPdbDir.setText("PDB file directory:");

        jTextFieldPdbFileDirectory.setText("/home/ts/data/PDB");
        jTextFieldPdbFileDirectory.setToolTipText("A directory containing PDB files. They may be in subdirectories.");

        jButtonSelectPdbDir.setText("Select...");
        jButtonSelectPdbDir.setToolTipText("Select PDB directory.");
        jButtonSelectPdbDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectPdbDirActionPerformed(evt);
            }
        });

        jLabeloptions.setText("Options");

        jCheckBoxRunSplitPdb.setSelected(true);
        jCheckBoxRunSplitPdb.setText("Run SplitPDB to extract one model from the PDB file for DSSP (required unless already done!)");
        jCheckBoxRunSplitPdb.setToolTipText("Runs SplitPDB. Required unless it has already been done! Run it if in doubt. Not running it saves time but leads to errors if it has not been run before!");

        jCheckBoxSkipSplitPdbIfSplitAvailable.setSelected(true);
        jCheckBoxSkipSplitPdbIfSplitAvailable.setText("...but skip running if a PDB file ending with \".split\" or \".split.gz\" is available for that protein ");
        jCheckBoxSkipSplitPdbIfSplitAvailable.setToolTipText("Uses existing SplitPDB output files if they exist instead of running SplitPDB again.");

        jCheckBoxSplitPdbGzippedOutput.setText("Write gzipped PDB output files (NOT recommended because DSSP currently cannot process them)");
        jCheckBoxSplitPdbGzippedOutput.setToolTipText("Whether to zip the split output PDB file.");

        jLabelPutPdbFiles.setText("Put the resulting split PDB files:");

        jComboBoxPutPdbFiles.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Into the directory where the original PDB file also is", "All directly into the directory given below", "In PDB-like subdirectories under the directory given below" }));
        jComboBoxPutPdbFiles.setToolTipText("Where to put the generated and split PDB files.");

        jTextFieldPdbSplitOutputDir.setText("/home/ts/data/PDB_split");
        jTextFieldPdbSplitOutputDir.setToolTipText("The split PDB file output directory.");
        jTextFieldPdbSplitOutputDir.setEnabled(false);

        jButtonSelectPdbSplitOutputDir.setText("Select...");
        jButtonSelectPdbSplitOutputDir.setToolTipText("Select split PDB output directory.");
        jButtonSelectPdbSplitOutputDir.setEnabled(false);
        jButtonSelectPdbSplitOutputDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectPdbSplitOutputDirActionPerformed(evt);
            }
        });

        jCheckBoxDownloadFailedDsspFiles.setText("Try to download a DSSP file from the internet if something went wrong while generating it locally");
        jCheckBoxDownloadFailedDsspFiles.setToolTipText("Dowloads failed DSSP files from the internet. Use with care, may lead to mass download!");

        jLabelPutDsspFiles.setText("Put the resulting DSSP files:");

        jComboBoxPutDsspFiles.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Into the directory where the original PDB file also is", "All directly into the directory given below", "In PDB-like subdirectories under the directory given below" }));
        jComboBoxPutDsspFiles.setToolTipText("Where to put the generated DSSP files.");

        jTextFieldDsspOutputDir.setText("/home/ts/data/DSSP");
        jTextFieldDsspOutputDir.setToolTipText("DSSP output directory.");
        jTextFieldDsspOutputDir.setEnabled(false);

        jButtonSelectDsspOutputDir.setText("Select...");
        jButtonSelectDsspOutputDir.setToolTipText("Select DSSP output directory.");
        jButtonSelectDsspOutputDir.setEnabled(false);

        jButtonRunBatchDssp.setText("Start batch processing");
        jButtonRunBatchDssp.setToolTipText("Starts batch processing. May take a while for many input files.");
        jButtonRunBatchDssp.setEnabled(false);
        jButtonRunBatchDssp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRunBatchDsspActionPerformed(evt);
            }
        });

        jButtonCheckSettings.setText("Check settings");
        jButtonCheckSettings.setToolTipText("Validate input.");
        jButtonCheckSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckSettingsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelContentLayout = new javax.swing.GroupLayout(jPanelContent);
        jPanelContent.setLayout(jPanelContentLayout);
        jPanelContentLayout.setHorizontalGroup(
            jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelContentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(jPanelContentLayout.createSequentialGroup()
                        .addComponent(jLabelPdbDir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldPdbFileDirectory)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonSelectPdbDir))
                    .addComponent(jSeparatorTop)
                    .addGroup(jPanelContentLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxSplitPdbGzippedOutput)
                            .addComponent(jCheckBoxSkipSplitPdbIfSplitAvailable)
                            .addGroup(jPanelContentLayout.createSequentialGroup()
                                .addComponent(jLabelPutPdbFiles)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBoxPutPdbFiles, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanelContentLayout.createSequentialGroup()
                                        .addComponent(jTextFieldPdbSplitOutputDir)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButtonSelectPdbSplitOutputDir))))))
                    .addGroup(jPanelContentLayout.createSequentialGroup()
                        .addComponent(jLabelPutDsspFiles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxPutDsspFiles, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanelContentLayout.createSequentialGroup()
                                .addComponent(jTextFieldDsspOutputDir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonSelectDsspOutputDir))))
                    .addGroup(jPanelContentLayout.createSequentialGroup()
                        .addGroup(jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxDownloadFailedDsspFiles)
                            .addComponent(jCheckBoxRunSplitPdb)
                            .addComponent(jLabelInputFiles)
                            .addComponent(jLabeloptions))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelContentLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonCheckSettings)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonRunBatchDssp)))
                .addContainerGap())
        );
        jPanelContentLayout.setVerticalGroup(
            jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelContentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelInputFiles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPdbDir)
                    .addComponent(jTextFieldPdbFileDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSelectPdbDir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparatorTop, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelContentLayout.createSequentialGroup()
                        .addComponent(jLabeloptions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxRunSplitPdb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxSkipSplitPdbIfSplitAvailable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxSplitPdbGzippedOutput)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelPutPdbFiles))
                    .addComponent(jComboBoxPutPdbFiles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPdbSplitOutputDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSelectPdbSplitOutputDir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxDownloadFailedDsspFiles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPutDsspFiles)
                    .addComponent(jComboBoxPutDsspFiles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDsspOutputDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSelectDsspOutputDir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRunBatchDssp)
                    .addComponent(jButtonCheckSettings))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanelContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSelectPdbDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectPdbDirActionPerformed
        
        File defaultDir = new File(Settings.get("vpg_S_output_dir"));
        JFileChooser fc = new JFileChooser(defaultDir);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int rVal = fc.showOpenDialog(this);

        if (rVal == JFileChooser.APPROVE_OPTION) {
            this.jTextFieldPdbFileDirectory.setText(fc.getSelectedFile().toString());
        }
    }//GEN-LAST:event_jButtonSelectPdbDirActionPerformed

    private void jButtonSelectPdbSplitOutputDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectPdbSplitOutputDirActionPerformed
        
        File defaultDir = new File(Settings.get("vpg_S_output_dir"));
        JFileChooser fc = new JFileChooser(defaultDir);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int rVal = fc.showOpenDialog(this);

        if (rVal == JFileChooser.APPROVE_OPTION) {
            this.jTextFieldPdbSplitOutputDir.setText(fc.getSelectedFile().toString());
        }
    }//GEN-LAST:event_jButtonSelectPdbSplitOutputDirActionPerformed

    private void jButtonCheckSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckSettingsActionPerformed
        
        this.checkInput();
    }//GEN-LAST:event_jButtonCheckSettingsActionPerformed

    private void jButtonRunBatchDsspActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRunBatchDsspActionPerformed
        
        System.out.println("Running batch DSSP processing... NOT SUPPORTED YET.");
        JOptionPane.showMessageDialog(this, "DSSP batch processing not supported yet.", "VPG -- DSSP batch creator", JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_jButtonRunBatchDsspActionPerformed

    
    /**
     * Item listener implementation.
     * @param e the DocumentEvent to handle
     */
    @Override public void changedUpdate(DocumentEvent e) {
        this.checkInput();
    }
    
    /**
     * Item listener implementation.
     * @param e the DocumentEvent to handle
     */
    @Override public void removeUpdate(DocumentEvent e) {
        this.checkInput();        
    }    
    
    /**
     * Item listener implementation.
     * @param e the DocumentEvent to handle
     */
    @Override public void insertUpdate(DocumentEvent e) {
        this.checkInput();
    }
    
    
    @Override public void itemStateChanged(ItemEvent e) {
        Object source = e.getSource();

        
        if (source == this.jCheckBoxDownloadFailedDsspFiles) {   
            if (e.getStateChange() == ItemEvent.SELECTED) {
                if( ! this.downloadWarningAlreadyShown) {                                        
                    //JOptionPane.showMessageDialog(this, "Activating the option may result in mass download DSSP files from the internet. Use with care.", "VPG -- Mass download warning", JOptionPane.WARNING_MESSAGE);
                    System.out.println(Settings.getApptag() + "NOTE: Activating the download failed DSSP files option may result in mass download DSSP files from the internet. Use with care.");
                }
            } else if(e.getStateChange() == ItemEvent.DESELECTED) {                
            }                        
        }
        else if(source == this.jCheckBoxRunSplitPdb) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                this.jCheckBoxSkipSplitPdbIfSplitAvailable.setEnabled(true);
                this.jCheckBoxSkipSplitPdbIfSplitAvailable.setEnabled(true);
                this.jCheckBoxSplitPdbGzippedOutput.setEnabled(true);
                this.jComboBoxPutPdbFiles.setEnabled(true);
            } else if(e.getStateChange() == ItemEvent.DESELECTED) {  
                System.out.println(Settings.getApptag() + "NOTE: Not running SplitPDB leads to errors if it has not been run before for all PDB files. Use with care.");
                this.jCheckBoxSkipSplitPdbIfSplitAvailable.setEnabled(false);
                this.jCheckBoxSkipSplitPdbIfSplitAvailable.setEnabled(false);
                this.jCheckBoxSplitPdbGzippedOutput.setEnabled(false);
                this.jComboBoxPutPdbFiles.setEnabled(false);
            }
        }
        
        
        this.setComboboxDependantFields(e);
        this.checkInput();
    }
    
    
    private void setComboboxDependantFields(ItemEvent e) {
        
        // SplitPDB output
        if(this.jCheckBoxRunSplitPdb.isSelected()) {
            if(this.jComboBoxPutPdbFiles.getSelectedIndex() > 0) {
                this.jTextFieldPdbSplitOutputDir.setEnabled(true);
                this.jButtonSelectPdbSplitOutputDir.setEnabled(true);
            } else {
                this.jTextFieldPdbSplitOutputDir.setEnabled(false);
                this.jButtonSelectPdbSplitOutputDir.setEnabled(false);
            }
        } else {
            this.jTextFieldPdbSplitOutputDir.setEnabled(false);
            this.jButtonSelectPdbSplitOutputDir.setEnabled(false);
        }
        
        // DSSP output
        if(this.jComboBoxPutDsspFiles.getSelectedIndex() > 0) {
            this.jTextFieldDsspOutputDir.setEnabled(true);
            this.jButtonSelectDsspOutputDir.setEnabled(true);
        } else {
            this.jTextFieldDsspOutputDir.setEnabled(false);
            this.jButtonSelectDsspOutputDir.setEnabled(false);
        }
    }
    
    
    
    public void checkInput() {
        
        Boolean allOk = true;
        String statusText = "";        
        
        File inputDirPdb = new File(this.jTextFieldPdbFileDirectory.getText());
        if(inputDirPdb.canRead() && inputDirPdb.isDirectory()) {
            this.jTextFieldPdbFileDirectory.setBackground(Color.WHITE);
            statusText += "PDB input directory seems ok. ";                        
        } else {
            this.jTextFieldPdbFileDirectory.setBackground(Color.RED);
            statusText += "PDB input directory  '" + inputDirPdb.getAbsolutePath() + "' invalid. ";
            allOk = false;
        }
        
        
        if(this.jTextFieldPdbSplitOutputDir.isEnabled()) {
            File outputDirSplitPdb = new File(this.jTextFieldPdbSplitOutputDir.getText());
            if(outputDirSplitPdb.canWrite() && outputDirSplitPdb.isDirectory()) {
                this.jTextFieldPdbSplitOutputDir.setBackground(Color.WHITE);
                statusText += "SplitPDB output directory seems ok. ";
            } else {
                this.jTextFieldPdbSplitOutputDir.setBackground(Color.RED);
                statusText += "SplitPDB output directory + '" + outputDirSplitPdb.getAbsolutePath() + "' invalid. ";
                allOk = false;
            }
        }
        
        if(this.jTextFieldDsspOutputDir.isEnabled()) {
            File outputDirDssp = new File(this.jTextFieldDsspOutputDir.getText());
            if(outputDirDssp.canWrite() && outputDirDssp.isDirectory()) {
                this.jTextFieldDsspOutputDir.setBackground(Color.WHITE);
                statusText += "DSSP output directory seems ok. ";
            } else {
                this.jTextFieldDsspOutputDir.setBackground(Color.RED);
                statusText += "DSSP output directory + '" + outputDirDssp.getAbsolutePath() + "' invalid. ";
                allOk = false;
            }
        }
        
        
        
        if(allOk) {
            System.out.println(Settings.getApptag() +  statusText);
            this.jButtonRunBatchDssp.setEnabled(true);
        } else {
            System.err.println(Settings.getApptag() +  statusText);
            this.jButtonRunBatchDssp.setEnabled(false);
        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VpgBatchDsspFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VpgBatchDsspFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VpgBatchDsspFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VpgBatchDsspFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VpgBatchDsspFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCheckSettings;
    private javax.swing.JButton jButtonRunBatchDssp;
    private javax.swing.JButton jButtonSelectDsspOutputDir;
    private javax.swing.JButton jButtonSelectPdbDir;
    private javax.swing.JButton jButtonSelectPdbSplitOutputDir;
    private javax.swing.JCheckBox jCheckBoxDownloadFailedDsspFiles;
    private javax.swing.JCheckBox jCheckBoxRunSplitPdb;
    private javax.swing.JCheckBox jCheckBoxSkipSplitPdbIfSplitAvailable;
    private javax.swing.JCheckBox jCheckBoxSplitPdbGzippedOutput;
    private javax.swing.JComboBox jComboBoxPutDsspFiles;
    private javax.swing.JComboBox jComboBoxPutPdbFiles;
    private javax.swing.JLabel jLabelInputFiles;
    private javax.swing.JLabel jLabelPdbDir;
    private javax.swing.JLabel jLabelPutDsspFiles;
    private javax.swing.JLabel jLabelPutPdbFiles;
    private javax.swing.JLabel jLabelStaus;
    private javax.swing.JLabel jLabeloptions;
    private javax.swing.JPanel jPanelContent;
    private javax.swing.JPanel jPanelStatus;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparatorTop;
    private javax.swing.JTextField jTextFieldDsspOutputDir;
    private javax.swing.JTextField jTextFieldPdbFileDirectory;
    private javax.swing.JTextField jTextFieldPdbSplitOutputDir;
    // End of variables declaration//GEN-END:variables
}
